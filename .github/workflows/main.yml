

Code coverage is a software-testing metric that determines how many lines of code have successfully validated under a test suite, and is usually measured with specialized tools like Codecov. These tools facilitate reporting and visualizing coverage reports and help developers understand how they can improve their test suite.

This tutorial explores running tests and generating code coverage in a Node application, as well as how to automate report generation and upload them from GitHub to Codecov using GitHub Actions.

Running JavaScript Tests and Coverage Locally with Jest
You can run tests and code coverage locally on your JavaScript application with Jest. Conveniently, Jest offers but doesn’t require much configuration for most JavaScript projects.

You can use the sample application by cloning it from GitHub:

git clone https://github.com/AdeyinkaAdegbenro/codecov_jest.git
Once you’ve cloned the sample application, Jest has already been added to the package.json file, so you’re ready to install it:

npm install
In the application folder, you should see two files: hello_world.js and hello_world.test.js. The hello_world.js file contains the function hello_world, which accepts a number and checks whether it is even or odd before returning a corresponding output. The hello_world.test.js is the Jest test file for hello_world.js.

Jest has already been added to the npm test command. This means you can run both the test and coverage using Jest directly from the command line by running:

npm run test
Jest will generate the coverage report and put it in a folder called coverage. Commit your code changes and push the sample application to a new repository on GitHub.

Setting Up GitHub Actions
Now that you can run tests and code coverage locally on the sample application, it’s time to take it up a notch by incorporating code coverage reporting into your continuous integration flow with GitHub Actions.

GitHub Actions enables you to add continuous integration to your GitHub repository using workflows you can define in a .yml file. These are stored in a directory called .github/workflows.

To set up GitHub Actions, you need to configure a workflow file. In the sample application, create a .github/workflows/ directory. Then, in the.github/workflows/ directory, create a new file coverage.yml. Note that the YAML file can be renamed to whatever you want.

mkdir .github/workflows && cd .github/workflows

touch coverage.yml
In the coverage.yml file, add the following lines:

name: Running Code Coverage

on: [push, pull_request]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [10.x, 12.x, 14.x, 16.x]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 2 

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install dependencies
      run: npm install

    - name: Run the tests
      run: npm test -- --coverage